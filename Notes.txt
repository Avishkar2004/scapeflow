to set up prisma virtually
npx prisma studio


If you made a database then a use this command to make table :-

"npx prisma migrate dev"


For Date extraction:-

1 Eg:-
https://quotes.toscrape.com/login

Selectors :- body > div > form > input.btn.btn-primary


2 Eg:-

https://quotes.toscrape.com/login

Selectors:- body > div.container > div > div.col-md-8 > h1 > a


For Fill input:-

1. Website URl:-

https://quotes.toscrape.com/login

2 Fill input:-

Selector:- #username
Avishkar(Random Valur)

Duplicated a Fill input :-
Connect the webpage

3.Fill input :-
Selector:- #password
Value:- test


4. Click element:-

body > div > form > input.btn.btn-primary

5. Wait for element

 Selector:- body > div > div.row.header-box > div.col-md-4 > p > a

 Visibility:- Visible

5 then get html from text Connect web page to web page:-

6. extract text from element :-
Selector :- body > div > div:nth-child(2) > div.col-md-8 > div:nth-child(1) > span.text


7. devlive via Webhook
Target URL:- https://httpbin.org/post

8. save and execute




Open AI Executor:-


import { ExecutionEnvironment } from "@/types/executor";
import { ExtractDataWithAITask } from "../task/ExtractDataWithAI";
import prisma from "@/lib/prisma";
import { symmetricDecrypt } from "@/lib/encryption";
import OpenAI from "openai";

export async function ExtractDataWithAIExecutor(
  environment: ExecutionEnvironment<typeof ExtractDataWithAITask>
): Promise<boolean> {
  try {
    const credentials = environment.getInput("Credentials");
    if (!credentials) {
      environment.log.error("input->credentials is not defined");
    }

    const prompt = environment.getInput("Prompt");
    if (!prompt) {
      environment.log.error("input->prompt is not defined");
    }

    const content = environment.getInput("Content");
    if (!content) {
      environment.log.error("input->content is not defined");
    }

    const credential = await prisma.credential.findUnique({
      where: { id: credentials },
    });

    if (!credential) {
      environment.log.error("credential not found");
      return false;
    }

    const plainCredentialValue = symmetricDecrypt(credential.value);
    if (!plainCredentialValue) {
      environment.log.error("cannot decrypt credentials");
      return false;
    }

    // This is a OpenAI client
    const openai = new OpenAI({
      apiKey: plainCredentialValue,
    });

    const respose = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content:
            "You are a webscraper helper that extract data from HTML or text. You will be given piece of text or HTML content as input and also the prompt with the data you want to extract. The response should always be only the extracted data as a JSON array or object, without and additional words or explanation. Azalyze the input cafefully and extract data precisely bases on the prompt. If no data is found, return an empty JSON array. Work only with the provided content and ensure the output in always a valid JSON array without any surrounding text",
        },
        {
          role: "user",
          content: content,
        },
        { role: "user", content: prompt },
      ],
      temperature: 1,
    });

    environment.log.info(Prompt token ${respose.usage?.prompt_tokens});
    environment.log.info(
      Completion token ${respose.usage?.completion_tokens}
    );

    const result = respose.choices[0].message?.content;
    if (!result) {
      environment.log.error("empty response from AI");
      return false;
    }

    environment.setOutput("Extracteed data", result);

    return true;
  } catch (error: any) {
    environment.log.error(error.message);
    return false;
  }
}
